{"version":3,"sources":["../src/thredds_ctrl.js"],"names":["MetricsPanelCtrl","TimeSeries","kbn","contextSrv","XmlConverter","_","d3","csscolorparser","mapRenderer","DataFormatter","panelDefaults","mbApiKey","mapStyle","mapCenterLatitude","mapCenterLongitude","initialZoom","userInteractionEnabled","animationSpeed","animationPause","hideFeaturesWithNoData","thredds","url","parameter","scale_min","scale_max","location","contents","callback","style","wmsoverlay","ThreddsCtrl","$scope","$injector","dataCharacteristics","opts","mapStyles","defaults","panel","setMapProviderOpts","dataFormatter","events","on","onInitEditMode","bind","onDataReceived","onPanelTeardown","onDataSnapshotLoad","loadThredds","lonLatStr","colorRamp","scaleName","center","map","getCenter","lng","lat","coords","split","strVal","Number","trim","mapCenterMoved","render","remove","hardRefresh","user","lightTheme","saturationClass","stopAnimation","clearFrames","setStyle","updateGeoDataFeatures","reload","snapshotLocationData","window","$","ajax","type","contentType","dataType","success","res","capabilities","xml2js","compact","WMS_Capabilities","layers","Capability","Layer","WmsLayer","find","item","Name","_text","timeDimensions","Dimension","replace","i","formatDate","setWmsData","fail","dashboard","snapshot","series","getCharacteristics","seriesData","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","dataList","addEditorTab","snapshotData","setZoom","features","timeValues","forEach","tv","feature","fname","properties","keyedSeries","geoKeySearch","geotIdTag","reStr","reg","RegExp","matches","match","length","featureIdsWithData","featureId","geoIdPath","reduce","obj","key","point","time","val","push","result","filteredFeatures","filter","findIndex","entry","Object","assign","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"thredds_ctrl.js","sourcesContent":["/* eslint import/no-extraneous-dependencies: 0 */\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\nimport {contextSrv} from 'app/core/core';\nimport XmlConverter from './libs/xml-js';\n\n\nimport _ from 'lodash';\nimport * as d3 from './libs/d3';\nimport csscolorparser from './libs/csscolorparser';\nimport mapRenderer from './map_renderer';\nimport DataFormatter from './data_formatter';\nimport './css/thredds-panel.css!';\n\nconst panelDefaults = {\n  mbApiKey: 'pk.xxxxx',\n  mapStyle: 'streets-v10', // see opts below\n  mapCenterLatitude: 42.40314651696761,\n  mapCenterLongitude: 15.706181114373521,\n  initialZoom: 5,\n  userInteractionEnabled: true,\n  animationSpeed: 1, // # of seconds animation time per day of data\n  animationPause: 500, // millisecond pause at end of animation loop\n  hideFeaturesWithNoData: true,\n  thredds: {\n    url: 'https://iwsproxy.visualfarm.it/thredds/wms/tmes_sea_level_frmc/TMES_sea_level_collection_best.ncd', // one of: url, text\n    parameter: 'sea_level-mean', // either the jsonp url or the json text itself\n    scale_min: -0.5,\n    scale_max: 1,\n    location: 'url', // one of: url, text\n    contents: 'xxxxxx', // either the jsonp url or the json text itself\n    callback: 'data', // named callback in jsonp contents\n    style: 'boxfill/sst_36', // named callback in jsonp contents\n  },\n  wmsoverlay: 'https://iwsproxy.visualfarm.it/istorms/istorms/base/{z}/{x}/{y}.png', // named callback in jsonp contents\n};\n\nexport default class ThreddsCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    // console.log('initializing thredds control');\n\n    this.dataCharacteristics = {};\n\n    this.opts = {\n      mapStyles: {\n        'streets': 'streets-v10',\n        'outdoors': 'outdoors-v10',\n        'light': 'light-v9',\n        'dark': 'dark-v9',\n        'satellite': 'satellite-v9',\n        'satellite-streets': 'satellite-streets-v10',\n        'traffic': 'traffic-day-v2',\n        'traffic-night': 'traffic-night-v2'\n      }\n    };\n    /* set defaults: */\n    _.defaults(this.panel, panelDefaults);\n\n    this.setMapProviderOpts();\n\n    this.dataFormatter = new DataFormatter(this, kbn);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n\n    // console.log('control constructor loading geo:');\n    this.loadThredds(true);\n    this.lonLatStr = this.panel.mapCenterLongitude + ',' + this.panel.mapCenterLatitude;\n\n    // $scope.$root.onAppEvent('show-dash-editor', this.doMapResize());\n    // $scope.$root.onAppEvent('hide-dash-editor', this.doMapResize());\n  }\n\n  getColorScaleImgUrl() {\n    return '/public/plugins/thredds-panel/images/colorRamps/' + this.panel.colorRamp.scaleName + '.png';\n  }\n  // getColorNames() {\n  //   return Object.keys(this.opts.colorRamps);\n  // }\n\n  setLocationFromMap() {\n    const center = this.map.map.getCenter();\n    this.panel.mapCenterLongitude = center.lng;\n    this.panel.mapCenterLatitude = center.lat;\n    this.lonLatStr = this.panel.mapCenterLongitude + ',' + this.panel.mapCenterLatitude;\n  }\n\n  setNewMapCenter() {\n    const coords = this.lonLatStr.split(',').map((strVal) => {\n      return Number(strVal.trim());\n    });\n    this.panel.mapCenterLongitude = coords[0];\n    this.panel.mapCenterLatitude = coords[1];\n\n    this.mapCenterMoved = true;\n    this.render();\n  }\n\n  hardResetMap() {\n    if (this.map) {\n      this.map.remove();\n    }\n    this.map = null;\n    this.render();\n    this.hardRefresh();\n  }\n\n  hardRefresh() {\n    this.loadThredds(true);\n  }\n\n  setMapProviderOpts() {\n    if (contextSrv.user.lightTheme) {\n      this.saturationClass = '';\n    } else {\n      this.saturationClass = 'map-darken';\n    }\n\n    if (this.map) {\n      this.map.stopAnimation();\n      this.map.clearFrames();\n      this.map.map.setStyle('mapbox://styles/mapbox/' + this.panel.mapStyle).on('style.load', () => {\n        this.updateGeoDataFeatures();\n        this.render();\n      });\n    }\n  }\n\n  loadThredds(reload) {\n    // console.log('loadThredds', new Date())\n    const panel = this.panel;\n    if (this.map && !reload) {\n      return;\n    }\n\n    if (this.panel.snapshotLocationData) {\n      this.thredds = this.panel.snapshotLocationData;\n      return;\n    }\n\n    if (this.panel.thredds.location === 'url') {\n      if (!this.panel.thredds.url || !this.panel.thredds.parameter) {\n        return;\n      }\n        window.$.ajax({\n          type: 'GET',\n          url: this.panel.thredds.url + '?service=WMS&version=1.3.0&request=GetCapabilities',\n          contentType: 'application/xml',\n          dataType: 'text',\n          success: (res) => {\n            this.capabilities = XmlConverter.xml2js(res, { compact : true }).WMS_Capabilities;\n            this.layers = this.capabilities.Capability.Layer.Layer.Layer;\n            this.WmsLayer = this.layers.find(function(item){\n              return item.Name._text === panel.thredds.parameter;\n            });\n            const timeDimensions = this.WmsLayer.Dimension._text\n              .replace('\\n', '')\n              .replace(/[^\\w-:,]/gi, '')\n              .replace('\\t', '')\n              .replace(' ', '')\n              .split(',')\n            // console.log('timeDimensions', timeDimensions)\n\n            this.thredds = timeDimensions.map((i)=>this.dataFormatter.formatDate(i.replace('00000Z', '00.000Z')));\n            // console.log('this.thredds', this.thredds);\n            this.setWmsData();\n            this.render();\n          }\n        }).fail((res) => {\n          // console.log('error in ajax: ', res);\n          this.thredds = null;\n          this.render();\n        });\n    }\n  }\n\n  setWmsData() {\n    if (!this.thredds) return;\n\n    if (this.dashboard.snapshot && this.thredds) {\n      this.panel.snapshotLocationData = this.thredds;\n    }\n    this.series = this.thredds;\n    // console.log('series: ', this.series);\n    this.dataCharacteristics = this.dataFormatter.getCharacteristics();\n\n    // console.log(this.dataCharacteristics);\n    this.render();\n  }\n\n\n  seriesThreddsHandler(seriesData) {\n    // console.log('seriesData', seriesData)\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    // console.log('seriesThreddsHandler', series)\n    return series;\n  }\n\n  onDataReceived(dataList) {\n    // console.log('DATA RECEIVED')\n    if (this.dashboard.snapshot && this.thredds) {\n      this.panel.snapshotLocationData = this.thredds;\n    }\n    this.render();\n  }\n\n  onPanelTeardown() {\n    if (this.map) this.map.remove();\n  }\n\n  onInitEditMode() {\n    // console.log('init edit mode');\n    this.addEditorTab('Thredds', 'public/plugins/thredds-panel/partials/editor.html');\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.onDataReceived(snapshotData);\n  }\n\n  seriesHandler(seriesData) {\n    // console.log('seriesData', seriesData)\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    // console.log(series)\n    return series;\n  }\n\n  setZoom() {\n    this.map.setZoom(this.panel.initialZoom || 1);\n  }\n\n  toggleLegend() {\n    this.render();\n  }\n\n  updateGeoDataFeatures() {\n    // console.log('updateGeoDataFeatures')\n    // console.log('updating geo features');\n    if (!this.thredds || !this.thredds.features) {\n      // console.log('no geo or no features');\n      return;\n    }\n    if (this.map) {\n      // console.log('geojson source found. removing...');\n      // this.map.map.removeSource('thredds');\n    }\n    if (!this.dataCharacteristics || !this.dataCharacteristics.timeValues) {\n      // console.log('no data yet...');\n      return;\n    }\n    // clear timeseries data from geojson data\n    this.dataCharacteristics.timeValues.forEach((tv) => {\n      this.thredds.features.forEach((feature) => {\n        const fname = 'f-' + tv;\n        if (feature.properties && feature.properties[fname]) {\n          delete feature.properties[fname];\n        }\n      });\n    });\n\n\n    // organize the series data - using the \"tag\" user has selected for correspondence with feature.id:\n    const keyedSeries = {};\n    const geoKeySearch = this.panel.geotIdTag + ':';\n    const reStr = geoKeySearch + ' ([^,}]+)';\n    const reg = new RegExp(reStr);\n    this.series.forEach((series) => {\n      // expect series.alias to be of the form --> \"measure.aggregator {tagKey: tagVal, tagKey: tagVal}\"\n      const matches = series.alias.match(reg);\n      // console.log('matches: ', matches);\n      if (matches && matches.length > 1) {\n        keyedSeries[matches[1]] = series;\n      }\n    });\n\n    // console.log('features: ', this.thredds.features);\n    // console.log('keyed series: ', keyedSeries);\n\n    // put data into features.\n    const featureIdsWithData = [];\n    this.thredds.features.forEach((feature) => {\n      if (!feature.properties) {\n        feature.properties = {};\n      }\n      // this funny business below deserializes the dot-notation path name and resolves the feature id\n      // the user has specified.\n      const featureId = this.panel.geoIdPath.split('.').reduce((obj, key) => obj[key], feature);\n      if (featureId in keyedSeries) {\n        const series = keyedSeries[featureId];\n        series.datapoints.forEach((point) => {\n          const time = point[1];\n          const val = point[0];\n          feature.properties['f-' + time] = val;\n        });\n        featureIdsWithData.push(featureId);\n      }\n    });\n\n\n    let result = this.thredds;\n    if (this.panel.hideFeaturesWithNoData) {\n      // Create array of features only containing features with data.\n      const filteredFeatures = this.thredds.features.filter((feature) => {\n        const featureId = this.panel.geoIdPath.split('.').reduce((obj, key) => obj[key], feature);\n        return featureIdsWithData.findIndex(entry => entry === featureId) >= 0;\n      });\n\n      // Create copy of geo object but with the filtered subset of features.\n      result = Object.assign({}, this.thredds);\n      result.features = filteredFeatures;\n    }\n\n    // if (result && this.map) {\n    //   console.log('adding geojson source...');\n    //   // this.map.map.addSource('thredds', {\n    //   //   type: 'geojson',\n    //   //   data: result\n    //   // });\n    // } else {\n    //   console.log('not adding source because no map');\n    // }\n  }\n\n/* eslint class-methods-use-this: 0 */\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n\n}\n\nThreddsCtrl.templateUrl = 'module.html';\n"]}